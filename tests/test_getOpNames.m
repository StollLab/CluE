
function doesPass = test_getOpNames()
OpNames{1} = {'E', ...
'Z', 'R', 'L'};

OpNames{2} = {'EE', ...
'EZ', 'ER', 'EL', ...
'ZE', 'RE', 'LE', ...
'ZZ', 'RL', 'LR', ...
'ZR', 'ZL', 'RZ', 'LZ', ...
'RR', 'LL'};

OpNames{3} = {...
'EEE', ...
'EEZ', 'EER', 'EEL', ...
'EZE', 'ERE', 'ELE', ...
'ZEE', 'REE', 'LEE', ...
'EZZ', 'ERL', 'ELR', ...
'ZEZ', 'REL', 'LER', ...
'ZZE', 'RLE', 'LRE', ...
'EZR', 'EZL', 'ERZ', 'ELZ', ...
'ZER', 'ZEL', 'REZ', 'LEZ', ...
'ZRE', 'ZLE', 'RZE', 'LZE', ...
'ERR', 'ELL',  ...
'RER', 'LEL',  ...
'RRE', 'LLE'};

OpNames{4} =  { ...
'EEEE', ...
'EEEZ', 'EEER', 'EEEL', ...
'EEZE', 'EERE', 'EELE', ...
'EZEE', 'EREE', 'ELEE', ...
'ZEEE', 'REEE', 'LEEE', ...
'EEZZ', 'EERL', 'EELR', ...
'EZEZ', 'EREL', 'ELER', ...
'ZEEZ', 'REEL', 'LEER', ...
'EZZE', 'ERLE', 'ELRE', ...
'ZEZE', 'RELE', 'LERE', ...
'ZZEE', 'RLEE', 'LREE', ...
'EEZR', 'EEZL', 'EERZ', 'EELZ', ...
'EZER', 'EZEL', 'EREZ', 'ELEZ', ...
'ZEER', 'ZEEL', 'REEZ', 'LEEZ', ...
'EZRE', 'EZLE', 'ERZE', 'ELZE', ...
'ZERE', 'ZELE', 'REZE', 'LEZE', ...
'ZREE', 'ZLEE', 'RZEE', 'LZEE', ...
'EERR', 'EELL', ...
'ERER', 'ELEL', ...
'REER', 'LEEL', ...
'ERRE', 'ELLE', ...
'RERE', 'LELE', ...
'RREE', 'LLEE'};


OpNames{5} =  { ...
'EEEEE', ...
'EEEEZ', 'EEEER', 'EEEEL', ...
'EEEZE', 'EEERE', 'EEELE', ...
'EEZEE', 'EEREE', 'EELEE', ...
'EZEEE', 'EREEE', 'ELEEE', ...
'ZEEEE', 'REEEE', 'LEEEE', ...
'EEEZZ', 'EEERL', 'EEELR', ...
'EEZEZ', 'EEREL', 'EELER', ...
'EZEEZ', 'EREEL', 'ELEER', ...
'ZEEEZ', 'REEEL', 'LEEER', ...
'EEZZE', 'EERLE', 'EELRE', ...
'EZEZE', 'ERELE', 'ELERE', ...
'ZEEZE', 'REELE', 'LEERE', ...
'EZZEE', 'ERLEE', 'ELREE', ...
'ZEZEE', 'RELEE', 'LEREE', ...
'ZZEEE', 'RLEEE', 'LREEE', ...
'EEEZR', 'EEEZL', 'EEERZ', 'EEELZ', ...
'EEZER', 'EEZEL', 'EEREZ', 'EELEZ', ...
'EZEER', 'EZEEL', 'EREEZ', 'ELEEZ', ...
'ZEEER', 'ZEEEL', 'REEEZ', 'LEEEZ', ...
'EEZRE', 'EEZLE', 'EERZE', 'EELZE', ...
'EZERE', 'EZELE', 'EREZE', 'ELEZE', ...
'ZEERE', 'ZEELE', 'REEZE', 'LEEZE', ...
'EZREE', 'EZLEE', 'ERZEE', 'ELZEE', ...
'ZEREE', 'ZELEE', 'REZEE', 'LEZEE', ...
'ZREEE', 'ZLEEE', 'RZEEE', 'LZEEE', ...
'EEERR', 'EEELL', ...
'EERER', 'EELEL', ...
'EREER', 'ELEEL', ...
'REEER', 'LEEEL', ...
'EERRE', 'EELLE', ...
'ERERE', 'ELELE', ...
'REERE', 'LEELE', ...
'ERREE', 'ELLEE', ...
'REREE', 'LELEE', ...
'RREEE', 'LLEEE'};


OpNames{6} =  { ...
'EEEEEE', ...
'EEEEEZ', 'EEEEER', 'EEEEEL', ...
'EEEEZE', 'EEEERE', 'EEEELE', ...
'EEEZEE', 'EEEREE', 'EEELEE', ...
'EEZEEE', 'EEREEE', 'EELEEE', ...
'EZEEEE', 'EREEEE', 'ELEEEE', ...
'ZEEEEE', 'REEEEE', 'LEEEEE', ...
'EEEEZZ', 'EEEERL', 'EEEELR', ...
'EEEZEZ', 'EEEREL', 'EEELER', ...
'EEZEEZ', 'EEREEL', 'EELEER', ...
'EZEEEZ', 'EREEEL', 'ELEEER', ...
'ZEEEEZ', 'REEEEL', 'LEEEER', ...
'EEEZZE', 'EEERLE', 'EEELRE', ...
'EEZEZE', 'EERELE', 'EELERE', ...
'EZEEZE', 'EREELE', 'ELEERE', ...
'ZEEEZE', 'REEELE', 'LEEERE', ...
'EEZZEE', 'EERLEE', 'EELREE', ...
'EZEZEE', 'ERELEE', 'ELEREE', ...
'ZEEZEE', 'REELEE', 'LEEREE', ...
'EZZEEE', 'ERLEEE', 'ELREEE', ...
'ZEZEEE', 'RELEEE', 'LEREEE', ...
'ZZEEEE', 'RLEEEE', 'LREEEE', ...
'EEEEZR', 'EEEEZL', 'EEEERZ', 'EEEELZ', ...
'EEEZER', 'EEEZEL', 'EEEREZ', 'EEELEZ', ...
'EEZEER', 'EEZEEL', 'EEREEZ', 'EELEEZ', ...
'EZEEER', 'EZEEEL', 'EREEEZ', 'ELEEEZ', ...
'ZEEEER', 'ZEEEEL', 'REEEEZ', 'LEEEEZ', ...
'EEEZRE', 'EEEZLE', 'EEERZE', 'EEELZE', ...
'EEZERE', 'EEZELE', 'EEREZE', 'EELEZE', ...
'EZEERE', 'EZEELE', 'EREEZE', 'ELEEZE', ...
'ZEEERE', 'ZEEELE', 'REEEZE', 'LEEEZE', ...
'EEZREE', 'EEZLEE', 'EERZEE', 'EELZEE', ...
'EZEREE', 'EZELEE', 'EREZEE', 'ELEZEE', ...
'ZEEREE', 'ZEELEE', 'REEZEE', 'LEEZEE', ...
'EZREEE', 'EZLEEE', 'ERZEEE', 'ELZEEE', ...
'ZEREEE', 'ZELEEE', 'REZEEE', 'LEZEEE', ...
'ZREEEE', 'ZLEEEE', 'RZEEEE', 'LZEEEE', ...
'EEEERR', 'EEEELL', ...
'EEERER', 'EEELEL', ...
'EEREER', 'EELEEL', ...
'EREEER', 'ELEEEL', ...
'REEEER', 'LEEEEL', ...
'EEERRE', 'EEELLE', ...
'EERERE', 'EELELE', ...
'EREERE', 'ELEELE', ...
'REEERE', 'LEEELE', ...
'EERREE', 'EELLEE', ...
'EREREE', 'ELELEE', ...
'REEREE', 'LEELEE', ...
'ERREEE', 'ELLEEE', ...
'REREEE', 'LELEEE', ...
'RREEEE', 'LLEEEE'};

doesPass = true;
for clusterSize=1:6
% clusterSize  
ON{clusterSize} = getOpNames(clusterSize);

match = strcmp(OpNames{clusterSize},ON{clusterSize});
if ~all(match)
  strcmp(OpNames{clusterSize},ON{clusterSize})
  x= 1:numel(OpNames{clusterSize});
  x(~match)
  OpNames{clusterSize}( x(~match) )
  ON{clusterSize}( x(~match) )
  doesPass = false;
end
end
if doesPass
  disp('pass');
else disp('fail')
end

end
function opNames = getOpNames(clusterSize)
Op = {'Z','R','L'};
opNames{1} = 'E';

for iSpin = 2:clusterSize
  opNames{1} = [opNames{1},'E'];
end

idx = 1;
for iSpin = 1:clusterSize
  
  ispin_index = clusterSize-iSpin + 1;
  for iop = 1:3
    idx = idx + 1;
    opNames{idx} = opNames{1};
    opNames{idx}(ispin_index) = Op{iop};
  end
end

OpOp = {'ZZ','RL','LR'};
for jSpin = 1:clusterSize-1
  jspin_index = clusterSize-jSpin + 1;
  
  for iSpin = jSpin+1:clusterSize
    ispin_index = clusterSize-iSpin + 1;
    
    for iop = 1:3
      idx = idx + 1;
      opNames{idx} = opNames{1};
      opNames{idx}(ispin_index) = OpOp{iop}(1);
      opNames{idx}(jspin_index) = OpOp{iop}(2);
    end
  end
end

% 

Op_CD = {'ZR', 'ZL', 'RZ', 'LZ'};
for jSpin = 1:clusterSize-1
  jspin_index = clusterSize-jSpin + 1;
  
  for iSpin = jSpin+1:clusterSize
    ispin_index = clusterSize-iSpin + 1;
    
    for iop = 1:4
      idx = idx + 1;
      opNames{idx} = opNames{1};
      opNames{idx}(ispin_index) = Op_CD{iop}(1);
      opNames{idx}(jspin_index) = Op_CD{iop}(2);
    end
  end
end

% RR and LL
for jSpin = 1:clusterSize-1
  jspin_index = clusterSize-jSpin + 1;
  
  for iSpin = jSpin+1:clusterSize
    ispin_index = clusterSize-iSpin + 1;
    
    
    for iop = 2:3
      idx = idx + 1;
      opNames{idx} = opNames{1};
      opNames{idx}(ispin_index) = Op{iop};
      opNames{idx}(jspin_index) = Op{iop};
    end
  end
end

end